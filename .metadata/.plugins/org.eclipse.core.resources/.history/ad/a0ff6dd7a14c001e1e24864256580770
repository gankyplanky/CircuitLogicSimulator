package components;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
import javax.swing.border.EmptyBorder;

import gateLogic.LogicTemplate;

public class CircuitCanvas extends JPanel implements MouseListener, MouseMotionListener {
	
	//Canvas version ID
	public static final long serialVersionUID = 1;
	
	//Drawing parameters
	public int preferedWidth = 1000;
	public int preferedHeight = 400;
	public int initialCircuitComponentX = 200;
	public int initialCircuitComponentY = 20;
	public boolean running = true;
	
	//Selection and drawing flags
	public boolean wireDrawFlag = false;
	
	//Selection objects
	public Wire curDrawnWire = null;
	public ConnectionPoint drawingConnPoint = null;
	public CircuitComponent selectedGate = null;
	public Point startPoint = null;
	public Point mouseLocation = null;
	
	//Lists of components
	public List<Wire> wires = new ArrayList<Wire>();
	public List<EntryPoint> entryPoints = new ArrayList<EntryPoint>();
	public List<ExitPoint> exitPoints = new ArrayList<ExitPoint>();
	public List<CircuitComponent> components = new ArrayList<CircuitComponent>();
	
	//Component limits
	public int entriesLimit = 20;
	public int exitsLimit = 20;
	
	//Timer
	Timer timer;
	
	public CircuitCanvas(){
		this.setBorder(new EmptyBorder(5, 5, 5, 5));
		this.setLayout(null);
		this.addMouseListener(this);
		this.addMouseMotionListener(this);
		this.setOpaque(true);
		
		timer = new Timer(15, new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				moveComponent();
			}
		});
		
		//Default entry and exit points
		addEntryPoint();
		addEntryPoint();
		addExitPoint();
	}
	
	private void moveComponent() {
		Point location = SwingUtilities.convertPoint(selectedGate, mouseLocation, this);
		if(this.contains(location)) {
			Point newLocation = location;
			newLocation.x = Math.max(newLocation.x, 0);
			newLocation.y = Math.max(newLocation.y, 0);
			newLocation.x = Math.min(newLocation.x, preferedWidth - selectedGate.drawWidth);
			newLocation.y = Math.min(newLocation.y, preferedHeight - selectedGate.drawHeight);
			
			this.setDoubleBuffered(true);
			
			//selectedGate.setLocation(newLocation.x, newLocation.y);
			selectedGate.x = newLocation.x;
			selectedGate.y = newLocation.y;
			startPoint = newLocation;
			
			removeAll();
			revalidate();
			repaint();
			this.setDoubleBuffered(false);
			}
	}
	
	@Override
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		Graphics2D g2d = (Graphics2D) g;
		
		//Draws border of canvas
		g2d.setStroke(new BasicStroke(2));
		g2d.setPaint(Color.BLACK);
		g2d.drawLine(25, 0, 25, preferedHeight);
		g2d.drawLine(preferedWidth - 25, 0, preferedWidth - 25, preferedWidth);
		g2d.setStroke(new BasicStroke(3));
		g2d.drawRect(0, 0, preferedWidth - 1, preferedHeight - 1);
		g2d.setStroke(new BasicStroke(1));
		
		int yPosInc = preferedHeight / (entryPoints.size() + 1);
		int yPos = yPosInc;
		
		//Draw entry points
		for(EntryPoint e : entryPoints) {
			this.add(e);
			e.setBounds(new Rectangle(e.drawWidth + 5, e.drawHeight));
			if(e.drawWidth < 25)
				e.setLocation(e.drawWidth / 2 + 5, yPos - (e.drawHeight / 2));
			else
				e.setLocation(e.drawWidth / 2, yPos - (e.drawHeight / 2));
			yPos += yPosInc;
		}
		
		yPosInc = preferedHeight / (exitPoints.size() + 1);
		yPos = yPosInc;
		
		//Draw exit points
		for(ExitPoint e : exitPoints) {
			this.add(e);
			e.setBounds(new Rectangle(e.drawWidth + 5, e.drawHeight));
			if(e.drawWidth < 25)
				e.setLocation((preferedWidth - 25) - (e.drawWidth / 2 + 5), yPos - (e.drawHeight / 2));
			else
				e.setLocation((preferedWidth - 30) - (e.drawWidth / 2), yPos - (e.drawHeight / 2));
			yPos += yPosInc;
		}

		//Draw components
		for(CircuitComponent c : components) {
			this.add(c);
			c.setBounds(new Rectangle(c.x, c.y, c.drawWidth, c.drawHeight));
		}
		
		//Draw wires - must be last
		for(Wire w : wires) {
			this.add(w);
			w.paintComponent(g2d);
		}
	}
	
	public void clearAllComponents() {
		for(int i = 0; i < wires.size(); i++)
			removeWire(wires.get(i));
		
		while(entryPoints.size() > 0) {
			removeEntryPoint(true);
		}
		
		while(exitPoints.size() > 0) {
			removeExitPoint(true);
		}
		
		components.clear();		
		
		removeAll();
		revalidate();
		repaint();
	}
	
	public void addCircuitComponent(LogicTemplate type) {
		CircuitComponent temp = new CircuitComponent(type, this);
		temp.addMouseListener(this);
		temp.addMouseMotionListener(this);
		temp.x = initialCircuitComponentX;
		temp.y = initialCircuitComponentY;
		components.add(temp);
		temp.setState(true);
	}
	
	public void removeCircuitComponent(CircuitComponent c) {
		components.remove(c);
		
		removeAll();
		revalidate();
		repaint();
	}
	
	public void addEntryPoint() {
		if(entryPoints.size() - 1 < entriesLimit) {
			entryPoints.add(new EntryPoint(this));
			
			if(entryPoints.size() == 16) {
				for(EntryPoint e : entryPoints) {
					e.setWidthHeight((int)Math.round(e.drawWidth * 0.7), (int)Math.round(e.drawHeight * 0.7));	
				}							
			}
			else if(entryPoints.size() > 16) {
				EntryPoint temPoint = entryPoints.get(entryPoints.size() - 1);
				temPoint.setWidthHeight((int)Math.round(temPoint.drawWidth * 0.7), (int)Math.round(temPoint.drawHeight * 0.7));
			}
		}
	}
	
	public void removeEntryPoint(boolean resetCheck) {
		if(entryPoints.size() > 1 || resetCheck) {
			EntryPoint ref = entryPoints.get(entryPoints.size() - 1);
			if(ref.nodeOut.connection != null)
				this.removeWire(ref.nodeOut.connection);
			entryPoints.remove(entryPoints.size() - 1);
			
			if(entryPoints.size() == 15) {
				for(EntryPoint e : entryPoints) {
					e.setWidthHeight((int)Math.round(e.drawWidth * 1.4), (int)Math.round(e.drawHeight * 1.4));
				}
			}
			
			removeAll();
			revalidate();
			repaint();
		}
	}
	
	public void addExitPoint() {
		if(exitPoints.size() - 1 < exitsLimit) {
			exitPoints.add(new ExitPoint(this));
			
			if(exitPoints.size() == 16) {
				for(ExitPoint e : exitPoints) {
					e.setWidthHeight((int)Math.round(e.drawWidth * 0.7), (int)Math.round(e.drawHeight * 0.7));	
				}								
			}
			else if(exitPoints.size() > 16) {
				ExitPoint temPoint = exitPoints.get(exitPoints.size() - 1);
				temPoint.setWidthHeight((int)Math.round(temPoint.drawWidth * 0.7), (int)Math.round(temPoint.drawHeight * 0.7));
			}
		}
	}
	
	public void removeExitPoint(boolean resetCheck) {
		if(exitPoints.size() > 1 || resetCheck) {
			ExitPoint ref = exitPoints.get(exitPoints.size() - 1);
			if(ref.nodeIn.connection != null)
				this.removeWire(ref.nodeIn.connection);
			exitPoints.remove(exitPoints.size() - 1);
			
			if(exitPoints.size() == 15) {
				for(ExitPoint e : exitPoints) {
					e.setWidthHeight((int)Math.round(e.drawWidth * 1.4), (int)Math.round(e.drawHeight * 1.4));
				}			
			}
			removeAll();
			revalidate();
			repaint();
		}
	}
	
	public void removeWire(Wire wire) {
		wires.remove(wire);
		wire.removeOperations();
		removeAll();
		revalidate();
		repaint();
	}
	
	@Override
	public void mouseDragged(MouseEvent e) {
		if(selectedGate != null) {
			Point location = SwingUtilities.convertPoint(selectedGate, e.getPoint(), this);
			if(this.contains(location)) {
				Point newLocation = location;
				newLocation.x = Math.max(newLocation.x, 0);
				newLocation.y = Math.max(newLocation.y, 0);
				newLocation.x = Math.min(newLocation.x, preferedWidth - selectedGate.drawWidth);
				newLocation.y = Math.min(newLocation.y, preferedHeight - selectedGate.drawHeight);
				
				this.setDoubleBuffered(true);
				
				//selectedGate.setLocation(newLocation.x, newLocation.y);
				selectedGate.x = newLocation.x;
				selectedGate.y = newLocation.y;
				startPoint = newLocation;
				
				removeAll();
				revalidate();
				repaint();
				this.setDoubleBuffered(false);
				}
			}		
	}

	@Override
	public void mouseMoved(MouseEvent e) {
		// Unused
	}

	@Override
	public void mouseClicked(MouseEvent e) {
		if(!(e.getSource() instanceof ConnectionPoint) && drawingConnPoint != null) {
			if(drawingConnPoint.connection != null)
				drawingConnPoint.removeConnection();
			drawingConnPoint.selected = false;
			drawingConnPoint = null;
		}		
	}

	@Override
	public void mousePressed(MouseEvent e) {
		if(e.getSource() instanceof CircuitComponent) {
			selectedGate = (CircuitComponent)e.getSource();
			startPoint = SwingUtilities.convertPoint(selectedGate, e.getPoint(), this);	
			selectedGate.hasMoved = true;
		}		
	}

	@Override
	public void mouseReleased(MouseEvent e) {
		startPoint = null;
		selectedGate = null;		
	}

	@Override
	public void mouseEntered(MouseEvent e) {
		// Unused		
	}

	@Override
	public void mouseExited(MouseEvent e) {
		// Unused	
	}
}
